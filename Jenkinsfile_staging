pipeline {
    agent {
        label 'jenkins'
    }
    
    environment {
        DOCKER_IMAGE = 'petclinic'
        DOCKER_TAG = "${BUILD_NUMBER}"
        WORKSPACE_PATH = "${env.WORKSPACE}"

        DOCKER_REGISTRY = 'ghcr.io'
        GITHUB_USERNAME = 'skevo04'
        GITHUB_REPO = 'java-app'
        GHCR_CREDENTIALS_ID = 'github_token'

        BLUE_SERVER_IP = '192.168.64.9'
        GREEN_SERVER_IP = '192.168.64.6'
        LOADBALANCER_SERVER = '192.168.64.8'
        SERVER_USER = 'ubuntu'
        SSH_CREDENTIALS_ID = 'prod_deploy'
        SSH_CREDENTIALS_ID_LOADBALANCER = 'jenkins_loadbalancer'
        
        // Health check configuration
        HEALTH_CHECK_MAX_RETRIES = '10'
        HEALTH_CHECK_RETRY_DELAY = '10' // seconds
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Frontend build') {
            steps {
                sh '''
                set -e
                chmod +x ./mvnw || true
                ./mvnw -B -Pcss -DskipTests generate-resources
                mkdir -p frontend-dist
                if [ -d target/classes/static ]; then
                  cp -R target/classes/static/* frontend-dist/ || true
                elif [ -d src/main/resources/static ]; then
                  cp -R src/main/resources/static/* frontend-dist/ || true
                fi
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'frontend-dist/**', allowEmptyArchive: true
                }
            }
        }

        stage('Backend build') {
            steps {
                sh '''
                set -e
                chmod +x ./mvnw || true
                ./mvnw -B -DskipTests clean package
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    docker.build("${DOCKER_IMAGE}:latest")
                }
            }
        }

        stage('Deploy Locally') {
            steps {
                sh 'docker-compose down || true'
                sh 'docker-compose up -d'
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "Performing health check on local deployment..."
                    
                    def healthCheckPassed = false
                    def retries = env.HEALTH_CHECK_MAX_RETRIES.toInteger()
                    
                    for (int i = 1; i <= retries; i++) {
                        try {
                            echo "Health check attempt ${i}/${retries}"
                            
                            // Test the application health
                            sh """
                                curl -f http://localhost:8080/actuator/health || \
                                curl -f http://localhost:8080 || \
                                exit 1
                            """
                            
                            echo "✅ Health check passed!"
                            healthCheckPassed = true
                            break
                            
                        } catch (Exception e) {
                            echo "⚠️ Health check attempt ${i} failed, waiting ${env.HEALTH_CHECK_RETRY_DELAY} seconds..."
                            if (i < retries) {
                                sleep env.HEALTH_CHECK_RETRY_DELAY.toInteger()
                            }
                        }
                    }
                    
                    if (!healthCheckPassed) {
                        echo "❌ All health check attempts failed. Application is not healthy."
                        currentBuild.result = 'FAILURE'
                        error("Health check failed after ${retries} attempts")
                    }
                }
            }
        }

        stage('Push to GitHub Packages') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            environment {
                GHCR_TOKEN = credentials("${GHCR_CREDENTIALS_ID}")
            }
            steps {
                script {
                    echo "Health check passed - pushing image to registry"
                    
                    // Login to GitHub Container Registry
                    sh """
                        echo \"\$GHCR_TOKEN\" | docker login ${DOCKER_REGISTRY} -u ${GITHUB_USERNAME} --password-stdin
                    """
                    
                    // Tag and push images
                    sh """
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REGISTRY}/${GITHUB_USERNAME}/${GITHUB_REPO}:${DOCKER_TAG}
                        docker tag ${DOCKER_IMAGE}:latest ${DOCKER_REGISTRY}/${GITHUB_USERNAME}/${GITHUB_REPO}:latest
                        docker push ${DOCKER_REGISTRY}/${GITHUB_USERNAME}/${GITHUB_REPO}:${DOCKER_TAG}
                        docker push ${DOCKER_REGISTRY}/${GITHUB_USERNAME}/${GITHUB_REPO}:latest
                    """
                }
            }
        }

    }
}