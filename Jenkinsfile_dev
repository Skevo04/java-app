pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'petclinic'
        DOCKER_TAG = "${BUILD_NUMBER}"
        WORKSPACE_PATH = "${env.WORKSPACE}"

        DOCKER_REGISTRY = 'ghcr.io'
        GITHUB_USERNAME = 'skevo04'
        GITHUB_REPO = 'java-app'
        GHCR_CREDENTIALS_ID = 'github_token'

        BLUE_SERVER_IP = '192.168.64.9'
        GREEN_SERVER_IP = '192.168.64.6'
        LOADBALANCER_SERVER = '192.168.64.8'
        SERVER_USER = 'ubuntu'
        SSH_CREDENTIALS_ID = 'prod_deploy'
        SSH_CREDENTIALS_ID_LOADBALANCER = 'jenkins_loadbalancer'
        
        // Health check configuration
        HEALTH_CHECK_MAX_RETRIES = '10'
        HEALTH_CHECK_RETRY_DELAY = '10' // seconds
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Frontend build') {
            steps {
                sh '''
                set -e
                chmod +x ./mvnw || true
                ./mvnw -B -Pcss -DskipTests generate-resources
                mkdir -p frontend-dist
                if [ -d target/classes/static ]; then
                  cp -R target/classes/static/* frontend-dist/ || true
                elif [ -d src/main/resources/static ]; then
                  cp -R src/main/resources/static/* frontend-dist/ || true
                fi
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'frontend-dist/**', allowEmptyArchive: true
                }
            }
        }

        stage('Backend build') {
            steps {
                sh '''
                set -e
                chmod +x ./mvnw || true
                ./mvnw -B -DskipTests clean package
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    docker.build("${DOCKER_IMAGE}:latest")
                }
            }
        }
}